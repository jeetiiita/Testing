package com.clicktable.support.validate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.clicktable.support.dao.intf.TaxDao;
import com.clicktable.support.model.SingleTax;
import com.clicktable.support.util.Constants;
import com.clicktable.support.util.ErrorCodes;
import com.clicktable.util.UtilityMethods;
import com.clicktable.validate.CustomValidations;
import com.clicktable.validate.EntityValidator;
import com.clicktable.validate.ValidationError;

@org.springframework.stereotype.Service
public class SingleTaxValidator extends EntityValidator<SingleTax> {

	@Autowired
	TaxDao taxDao;

	public List<ValidationError> validateTaxOnAdd(SingleTax singleTax) {

	List<ValidationError> errorList = validateOnAdd(singleTax);
	

	if ((singleTax.getType()!=null) && (!UtilityMethods.getEnumValues(Constants.TAX, Constants.TYPE).contains(singleTax.getType()))) {
		errorList = CustomValidations.populateErrorList(errorList, Constants.TYPE, UtilityMethods.getErrorMsg(ErrorCodes.INVALID_TAX_TYPE), ErrorCodes.INVALID_TAX_TYPE);
	}
	if ((singleTax.getState()!=null) && (!UtilityMethods.getEnumValues(Constants.TAX, Constants.STATE).contains(singleTax.getState()))) {
		errorList = CustomValidations.populateErrorList(errorList, Constants.STATE, UtilityMethods.getErrorMsg(ErrorCodes.INVALID_TAX_STATE), ErrorCodes.INVALID_TAX_STATE);
	}
	if (singleTax.getCountry()!=null && (!UtilityMethods.getEnumValues(Constants.TAX, Constants.COUNTRY).contains(singleTax.getCountry()))) {
		errorList = CustomValidations.populateErrorList(errorList, Constants.COUNTRY, UtilityMethods.getErrorMsg(ErrorCodes.INVALID_TAX_COUNTRY), ErrorCodes.INVALID_TAX_COUNTRY);
	}
	
	Map<String,Object> params = new HashMap<String, Object>();
	
	params.put(Constants.STATE, singleTax.getState());
	params.put(Constants.COUNTRY, singleTax.getCountry());
	params.put(Constants.NAME, singleTax.getName());
	params.put(Constants.STATUS, Constants.ACTIVE);
	
	List<SingleTax> taxList = taxDao.findByFields(SingleTax.class, params);
	
	if(!taxList.isEmpty())
		errorList = CustomValidations.populateErrorList(errorList, Constants.NAME, UtilityMethods.getErrorMsg(ErrorCodes.DUPLICATE_TAX_NAME), ErrorCodes.DUPLICATE_TAX_NAME);
	
	return errorList;
	}

	@Override
	public String getMissingGuidErrorCode() {
		return null;//ErrorCodes.TAX_GUID_REQUIRED;
	}

	@Override
	public String getInvalidGuidErrorCode() {
		return null;//sErrorCodes.INVALID_TAX_GUID;
	}
}