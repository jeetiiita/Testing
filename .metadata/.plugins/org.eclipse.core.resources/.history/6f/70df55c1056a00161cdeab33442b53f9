package com.clicktable.consumer.dao.impl;

import static com.clicktable.consumer.util.ReserveConstants.DAY_NAME;
import static com.clicktable.consumer.util.ReserveConstants.FRIDAY;
import static com.clicktable.consumer.util.ReserveConstants.MONDAY;
import static com.clicktable.consumer.util.ReserveConstants.SATURDAY;
import static com.clicktable.consumer.util.ReserveConstants.SUNDAY;
import static com.clicktable.consumer.util.ReserveConstants.THURSDAY;
import static com.clicktable.consumer.util.ReserveConstants.TUESDAY;
import static com.clicktable.consumer.util.ReserveConstants.WEDNESDAY;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.joda.time.base.AbstractDateTime;
import org.springframework.data.neo4j.conversion.Result;
import org.springframework.stereotype.Service;

import com.clicktable.consumer.dao.intf.RestaurantDetailDao;
import com.clicktable.consumer.util.ReserveConstants;
import com.clicktable.model.Attribute;
import com.clicktable.model.CalenderEvent;
import com.clicktable.model.Cuisine;
import com.clicktable.model.CustomGuidCalEvent;
import com.clicktable.model.Discount;
import com.clicktable.model.Event;
import com.clicktable.model.GuestReview;
import com.clicktable.model.Menu;
import com.clicktable.model.OperationalHours;
import com.clicktable.model.Restaurant;
import com.clicktable.model.RestaurantBasicInfo;
import com.clicktable.model.RestaurantExtension;
import com.clicktable.model.Review;
import com.clicktable.model.Shift;
import com.clicktable.util.Constants;
import com.clicktable.util.RelationshipTypes;
import com.clicktable.util.UtilityMethods;

import play.Logger;
/**
 * @author j.yadav
 *
 */
@Service
public class RestaurantDetailDaoImpl extends GraphDBDao<RestaurantBasicInfo> implements RestaurantDetailDao {

	
	private static final Logger.ALogger log = Logger.of(RestaurantDetailDaoImpl.class);
	/**
     * Constructor set the class type to Model class
     * 
     */
	public RestaurantDetailDaoImpl() {
		super();
		this.setType(Restaurant.class);
	}

	@Override
	public RestaurantBasicInfo getRestaurantInfo(Map<String, Object> params) {

		String query = buildRestInfoGetQuery(params);

		Result<Map<String, Object>> res = template.query(String.valueOf(query), params);
		RestaurantBasicInfo basicInfo = new RestaurantBasicInfo();
		
		Iterator<Map<String, Object>> i = res.iterator();
		Restaurant rest = new Restaurant();
		RestaurantExtension restExt = new RestaurantExtension();
		
		if (i.hasNext()) {
			Map<String, Object> map = i.next();
			rest = template.convert(map.get("rest"), Restaurant.class);
			restExt = template.convert(map.get("restExt"),RestaurantExtension.class);
			basicInfo.setReviewBucket(restExt);
			
			setBasicInfoList(map, basicInfo);
			
			OperationalHours operationalHours = convertToOperationalHours((List) map.get("diningShifts"));
			operationalHours.setRestGuid(params.get(Constants.REST_GUID).toString());
			basicInfo.setOperationalHours(operationalHours);
		}
		setRestaurantInfo(rest,basicInfo);

				return basicInfo;
	}
	
	
	private void setBasicInfoList(Map<String, Object> map, RestaurantBasicInfo basicInfo) {

		List<Cuisine> cuisines = (List<Cuisine>) map.get("cuisines");
		List<Menu> menus = (List<Menu>) map.get("menus");
		List<Attribute> highLights = (List<Attribute>) map.get("highLights");
		String restType = map.get("categoryName").toString();

		List<GuestReview> guestReviews = new ArrayList<>();
		List<List<Object>> guestReviewList = (List<List<Object>>) map.get("reviews");

		if (map.containsKey("followed") && (int) map.get("followed") > 0) {
			basicInfo.setFollowed(true);
		}
		if (guestReviewList != null) {
			for (List<Object> entry : guestReviewList) {

				GuestReview guestReview = new GuestReview();
				guestReview.setGuestName(String.valueOf(entry.get(0)));
				guestReview.setPhotoUrl(String.valueOf(entry.get(1)));
				guestReview
						.setCreated_dt(entry.get(2) == null ? null : new Date(Long.parseLong(entry.get(2).toString())));
				guestReview.setReview(String.valueOf(entry.get(3)));
				guestReview.setRating(entry.get(4) == null ? null : Integer.parseInt(entry.get(4).toString()));
				guestReview.setReviewResponse(String.valueOf(entry.get(5)));
				guestReview.setResponseDate(
						entry.get(6) == null ? null : new Date(Long.parseLong(entry.get(6).toString())));
				guestReviews.add(guestReview);
			}
		}

		basicInfo.setGuestReviews(guestReviews);
		basicInfo.setMenu(menus);
		basicInfo.setHighLights(highLights);
		basicInfo.setCuisines(cuisines);
		basicInfo.setRestaurantType(restType);
	}

	private void setRestaurantInfo(Restaurant rest, RestaurantBasicInfo basicInfo) {
		if (rest != null) {
			basicInfo.setGuid(rest.getGuid());
			basicInfo.setAddressLine1(rest.getAddressLine1());
			basicInfo.setAddressLine2(rest.getAddressLine2());
			basicInfo.setCity(rest.getCity());
			basicInfo.setLocality(rest.getLocality());
			basicInfo.setRegion(rest.getRegion());
			basicInfo.setBuilding(rest.getBuilding());
			basicInfo.setState(rest.getState());

			basicInfo.setCostFor2(rest.getCostFor2());
			basicInfo.setLatitude(rest.getLatitude());
			basicInfo.setLongitude(rest.getLongitude());

			basicInfo.setPhoneNo1(rest.getPhoneNo1());
			basicInfo.setPhoneNo2(rest.getPhoneNo2());

			basicInfo.setSource(rest.getType());
			basicInfo.setTagLine(rest.getTagLine());
			basicInfo.setWebsite(rest.getWebsite());

			if (!rest.getImages().isEmpty()) {
				basicInfo.setPhotoUrl(rest.getImages().get(0));
			}
			basicInfo.setZipcode(rest.getZipcode());
			basicInfo.setDisplayName(rest.getDisplayName());
			basicInfo.setName(rest.getName());

			String countryCode = rest.getCountryCode();

			List<String> countryName = UtilityMethods.getEnumValues("country", countryCode);

			if (!countryName.isEmpty()) {
				basicInfo.setCountry(countryName.get(0));
			}
		}

	}

	@Override
	public OperationalHours convertToOperationalHours(List diningShifts) {
		OperationalHours opHours = initOperationalHours();
		if(null != diningShifts) {
			for(Object diningShift : diningShifts) {
				Shift shift = getShiftObject((Map<String, Object>) diningShift);
				String day = shift.getDay();
				switch (day) {
					case SUNDAY:
						opHours.getSunday().add(shift);
						break;
					case MONDAY:
						opHours.getMonday().add(shift);
						break;
					case TUESDAY:
						opHours.getTuesday().add(shift);
						break;
					case WEDNESDAY:
						opHours.getWednesday().add(shift);
						break;
					case THURSDAY:
						opHours.getThursday().add(shift);
						break;
					case FRIDAY:
						opHours.getFriday().add(shift);
						break;
					case SATURDAY:
						opHours.getSaturday().add(shift);
						break;
					default:
				}
			}
		}
		return opHours;
	}

	private Shift getShiftObject(Map<String, Object> diningShift) {
		Shift shift = new Shift();
		shift.setDay(diningShift.get(DAY_NAME).toString());
		shift.setStartTimeInMillis(Long.parseLong(diningShift.get("startTimeInMillis").toString()));
		shift.setEndTimeInMillis(Long.parseLong(diningShift.get("endTimeInMillis").toString()));
		shift.setAll_day(Boolean.valueOf(diningShift.get("all_day").toString()));
		shift.setShiftName(diningShift.get("shiftName").toString());
		shift.setDiningSlot(0);
		int mins = (int) (shift.getStartTimeInMillis() / 1000 / 60);
		shift.setStartTime(getTimeInHHMM(mins));

		mins = (int) (shift.getEndTimeInMillis() / 1000 / 60);
		shift.setEndTime(getTimeInHHMM(mins));

		return shift;
	}

	private String getTimeInHHMM(int mins) {
		StringBuilder time = new StringBuilder();
		time.append(mins / 60).append(':').append(mins % 60);
		return time.toString();
	}

	private OperationalHours initOperationalHours() {
		OperationalHours operationalHours = new OperationalHours();
		operationalHours.setSunday(new ArrayList<>());
		operationalHours.setMonday(new ArrayList<>());
		operationalHours.setTuesday(new ArrayList<>());
		operationalHours.setWednesday(new ArrayList<>());
		operationalHours.setThursday(new ArrayList<>());
		operationalHours.setFriday(new ArrayList<>());
		operationalHours.setSaturday(new ArrayList<>());
		return operationalHours;
	}

	private String buildRestInfoGetQuery(Map<String, Object> params) {
		// Restaurant node
		StringBuilder matchQuery = new StringBuilder(
				"MATCH (restaurant: `Restaurant` {guid:{" + Constants.REST_GUID + "}})-[:" + RelationshipTypes.HAS_CUISINE + "]->(cuisine: Cuisine) ");
	
		StringBuilder returnQuery = new StringBuilder();
		StringBuilder firstWithQuery = new StringBuilder("DISTINCT(restaurant) as rest,");
		StringBuilder secondWithQuery = new StringBuilder();
		
		firstWithQuery.append("collect(distinct cuisine) as cuisines,");
		matchQuery.append(" OPTIONAL MATCH (restaurant)-[:" + RelationshipTypes.REST_HAS_EXTN + "]->(restExt: `RestaurantExtension`) ");
		firstWithQuery.append("restExt,");
		
		matchQuery.append(" OPTIONAL MATCH (restaurant)-[:" + RelationshipTypes.REST_HAS_MENU + "]->(menu: Menu) ");
		firstWithQuery.append("collect(distinct menu) as menus,");
		
		matchQuery.append(" OPTIONAL MATCH (restaurant)-[:REST_HAS_OPHR]->(shift:`Shift`)  ");
		firstWithQuery.append("collect(distinct shift) as diningShifts,");
		
		matchQuery.append(" OPTIONAL MATCH (restaurant)<-[:GUEST_FOLLOW_REST]-(guest:GuestProfile)  ");
		firstWithQuery.append("count(distinct guest) as followerCount,");
		
		matchQuery.append(" OPTIONAL MATCH (restaurant)-[:HAS_ATTR]->(h: `Attribute`{type:'CATEGORY'}) ");
		firstWithQuery.append("h.name as categoryName,");
		
		matchQuery.append(" OPTIONAL MATCH (restaurant)-[:HAS_ATTR]->(hs: `Attribute`{type:'HIGHLIGHTS'}) ");
		firstWithQuery.append("collect(distinct hs) as highLights");
		
		if (params.containsKey(Constants.GUEST_GUID) && params.get(Constants.GUEST_GUID) != null) {
			matchQuery.append(" OPTIONAL MATCH (restaurant)<-[follow:GUEST_FOLLOW_REST]-(guest:GuestProfile {guid: {"+ Constants.GUEST_GUID + "}}) ");
			firstWithQuery.append(",count(distinct follow) as followed");
			
		}
		
		StringBuilder query = matchQuery;
		query.append(" WITH ");
		query.append(firstWithQuery);
		
		query.append(
				" OPTIONAL MATCH (restaurant)-[:" + RelationshipTypes.HAS_GUEST + "]->(reviewer: GuestProfile)"
						+ "-[:" + RelationshipTypes.GUEST_HAS_REVIEW + "{rest_guid:{"+ Constants.REST_GUID +"}}]->(review:ReviewRating)");
	
		if (params.containsKey(Constants.GUEST_GUID) && params.get(Constants.GUEST_GUID) != null) {
			secondWithQuery.append("followed,");
		}		
		
		secondWithQuery.append("rest, restExt, cuisines, menus, diningShifts, followerCount, highLights,categoryName, reviewer, review ORDER BY review.created_dt LIMIT 10");
		
		returnQuery.append(" RETURN rest, restExt, cuisines, menus, diningShifts, followerCount, highLights,categoryName, "
				+ "collect(distinct [reviewer.first_name, reviewer.photo_url, review.created_dt, review.review, "
				+ "review.rating, review.reviewResponse, review.response_dt]) as reviews");

		if (params.containsKey(Constants.GUEST_GUID) && params.get(Constants.GUEST_GUID) != null) {
			returnQuery.append(",followed");
		}
		      
		query.append(" WITH ");
		query.append(secondWithQuery);
		query.append(returnQuery);

		log.debug("Query for restaurant details {}", query);
		return query.toString();

	}

	@Override
	public Map<String, Object> getCalEventsWithDiningSlot(Map<String, Object> params) {
		StringBuilder query = new StringBuilder("MATCH (r:" + Constants.RESTAURANT_LABEL + "{guid:{"
				+ Constants.REST_ID + "}})-[rhc:" + RelationshipTypes.REST_HAS_CAL + "]-(t:`CalenderEvent`)");
			query.append("<-[]-(e:"+Constants.EVENT_LABEL+")");
		query.append(" WHERE toInt(t.start_time)<= toInt({" + Constants.START_TIME_BEFORE + "}) + r.dining_slot_interval");
		query.append(" AND toInt(t.end_time)>= toInt({"+Constants.END_TIME_AFTER+"})");
		query.append(" RETURN r.dining_slot_interval as interval, t,e");

		Result<Map<String, Object>> res = template.query(query.toString(), params);
		int interval = 0;
		Iterator<Map<String, Object>> i = res.iterator();
		List<Event> eventlist = new ArrayList<>();

		while (i.hasNext()) {
			Map<String, Object> map = i.next();
			Event event = template.convert(map.get("e"), Event.class);
			CustomGuidCalEvent customCalEvent = new CustomGuidCalEvent(event);
			CalenderEvent calEvent = template.convert(map.get("t"), CalenderEvent.class);
			customCalEvent.setCreatedBy(calEvent.getCreatedBy());
			customCalEvent.setCreatedDate(calEvent.getCreatedDate());
			Date startTime = calEvent.getStartTime();
			Date endTime = calEvent.getEndTime();

			customCalEvent.setEndDate(endTime);
			customCalEvent.setEndTime(endTime);
			customCalEvent.setStartDate(startTime);
			customCalEvent.setStartTime(startTime);
			customCalEvent.setCategory(calEvent.getCategory());
			customCalEvent.setEventDescription(calEvent.getEventDescription());
			customCalEvent.setName(calEvent.getName());
			customCalEvent.setGuid(calEvent.getGuid());
			customCalEvent.setPhotoURL(calEvent.getPhotoURL());
			customCalEvent.setStatus(calEvent.getStatus());
			customCalEvent.setUpdatedBy(calEvent.getUpdatedBy());
			customCalEvent.setUpdatedDate(calEvent.getUpdatedDate());
			
			if (("END_AFTER").equalsIgnoreCase(event.getRecurEndType())) {
				Long recurEndTime = getLastCalendarEventTime(event.getGuid());
				DateTime recurEndDate = new DateTime(recurEndTime);
				customCalEvent.setRecurrenceEndDate(recurEndDate.toDate());
			}

			if(calEvent.getType().equals(Constants.OFFER)) {
				Discount discount = new Discount(calEvent);
				customCalEvent.setDiscount(discount);
			}

			eventlist.add(customCalEvent);
		}

		if (res.iterator().hasNext()) {
			interval = (int) res.iterator().next().get("interval");
		}

		Map<String, Object> mapResult = new HashMap<>();
		mapResult.put("calEvents", eventlist);
		mapResult.put("interval", interval);

		return mapResult;
	}
	
	@Override
	public Long getLastCalendarEventTime(String eventGuid) {
		Map<String, Object> params = new HashMap<>();
		params.put("eventGuid", eventGuid);
		StringBuilder query = new StringBuilder();
		query.append("MATCH(e:" + Constants.EVENT_LABEL + "{guid:{eventGuid}})-[hh:HAS_CAL_EVENT]-(c:CalenderEvent)");
		query.append(" return max(c.end_time) as endTime");
		Long endTime = null;
		Result<Map<String, Object>> result = template.query(query.toString(), params);
		Iterator<Map<String, Object>> i = result.iterator();
		if (i.hasNext()) {
			Map<String, Object> map = i.next();
			endTime = template.convert(map.get("endTime"), Long.class);
		}
		return endTime;
	}

	@Override
	public List<GuestReview> getRestaurantReviews(Map<String, Object> params) {
		StringBuilder query = new StringBuilder(
				" MATCH (restaurant)-[:" + RelationshipTypes.REST_HAS_REVIEW + "]->(review:ReviewRating)" + "<-[:"
						+ RelationshipTypes.GUEST_HAS_REVIEW + "]-(reviewer: GuestProfile)"
						+ "OPTIONAL MATCH  (review)-[: REVIEW_HAS_RESPONSE]->(response: RestaurantReviewResponse) ");

		query.append(
				"RETURN reviewer.first_name as guestName, reviewer.photo_url as photoUrl, reviewer.is_vip as is_vip"
						+ ", review.created_dt as created_dt, review.review as review, review.rating as rating, "
						+ "response.response as reviewResponse, response.created_dt as responseDate");
		handleOrderBy(query, params, Review.class);
		Integer pageSize = getPageSize(params);
		Integer startIndex = getIndex(params, pageSize);
		query.append(" SKIP " + startIndex + " LIMIT " + pageSize);

		Result<Map<String, Object>> result = template.query(query.toString(), params);

		List<GuestReview> reviewList = new ArrayList<>();
		result.forEach(entry -> {
			GuestReview review = template.convert(entry, GuestReview.class);
			reviewList.add(review);
		});
		// template.convert(result.iterator(), )
		return reviewList;

	}

}
