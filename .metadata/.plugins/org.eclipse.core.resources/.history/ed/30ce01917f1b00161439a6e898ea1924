package com.clicktable.support.service.impl;

import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import play.Logger;
import play.mvc.Result;

import com.clicktable.support.dao.intf.InvoiceDao;
import com.clicktable.support.dao.intf.InvoiceTaxDao;
import com.clicktable.support.model.Invoice;
import com.clicktable.support.model.InvoiceTax;
import com.clicktable.support.service.intf.InvoicePdfService;
import com.clicktable.support.util.Constants;
import com.clicktable.util.UtilityMethods;
import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;

@Component
public class InvoicePdfServiceImpl implements InvoicePdfService{

	@Autowired 
	InvoiceDao invoiceDao;
	

	@Autowired 
	InvoiceTaxDao invoiceTaxDao;
	
	com.itextpdf.text.Font contentRegular  = getSansSerifFont(8, false);
	com.itextpdf.text.Font contentBold  = getSansSerifFont(9, true);
	
	//Format formatter = new SimpleDateFormat("MMMM"); 
	
    String month = UtilityMethods.getDate("MMMM", -1);
    String path = Constants.PATH;
    
    @Override
	public Result generatePdf(){
		/*String invoiceGuid;
		Logger.debug("generatePdf "+path);
		System.out.println("generatePdf "+path);
		File PdfFolder = new File(path + "//" + Constants.INVOICE_FOLDER);
		boolean flag = PdfFolder.mkdir();
		File dateFolder = new File(path + "//" + Constants.INVOICE_FOLDER+"//"+month);
		dateFolder.mkdir();
		
		List<InvoiceTxn> invoiceTxnList = new ArrayList<InvoiceTxn>();
		List<Invoice> invoiceList = getInvoiceData();
		Logger.debug("invoiceList : "+invoiceList);
		System.out.println("invoiceList : "+invoiceList);
		if (invoiceList.size() != 0) {
			for (Invoice invoice : invoiceList) {
				invoiceGuid = invoice.getGuid();
				invoiceTxnList = getInvoiceTxnData(invoiceGuid);
				if (invoiceTxnList.size() != 0)
					drawPdf(invoiceTxnList, invoice);
			}
		}
		*/
		return null;
	}
	
/*	public void drawPdf(List<InvoiceTxn> invoiceTxnList, Invoice invoice){

		String restGuid = invoice.getRestaurantGuid();
		
		FileOutputStream fileOutputStream = null;
		PdfReader reader = null;
		PdfStamper stamper = null;
		
		try {
			fileOutputStream = new FileOutputStream(path + "//" + Constants.INVOICE_FOLDER+"//"+month+"//"+restGuid+".Pdf");
			reader = new PdfReader(Constants.PDF_TEMPLATE_PATH);
			stamper = new PdfStamper(reader, fileOutputStream);

			populateInvoiceAndRestInfo(invoice, stamper);
			
			PdfPTable expenseTable = generateExpenseTable(invoiceTxnList);
			PdfPTable taxTable = generateTaxTable(invoice);
			PdfPTable payableAmountTable = generateAmountTable(invoice);
			
			ColumnText column = new ColumnText(stamper.getOverContent(1));
	        Rectangle rectPage1 = new Rectangle(36, 36, 559, 540);
	        column.setSimpleColumn(rectPage1);
	        column.addElement(expenseTable);
	        column.addElement(taxTable);
	        column.addElement(payableAmountTable);
	        
	        int pagecount = 1;
	        Rectangle rectPage2 = new Rectangle(36, 36, 559, 806);
	        int statusInt = column.go();
	        Rectangle pagesize = PageSize.A4;
	        while (ColumnText.hasMoreText(statusInt)) {
	        	statusInt = triggerNewPage(stamper, pagesize, column, rectPage2, ++pagecount);
	        }
	        
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if (stamper != null)
					stamper.close();
				if (reader != null)
					reader.close();
			} catch (DocumentException | IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		}
	}*/
	
	PdfPTable generateAmountTable(Invoice invoice) throws DocumentException{
		
		PdfPTable payableAmountTable = new PdfPTable(3); 
		
		float payableAmountWidth[] = {6.8f, 2.1f, 1.1f};
		payableAmountTable.setWidths(payableAmountWidth);
		payableAmountTable.setWidthPercentage(102);
		
		PdfPCell payableAmountCell = new PdfPCell(new Paragraph(Constants.AMNT_IN_WRDS, contentRegular));
		payableAmountCell.setBorder(Rectangle.LEFT);
		payableAmountCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		payableAmountCell.setFixedHeight(15);
		payableAmountCell.setPaddingLeft(15f);
		payableAmountCell.setVerticalAlignment(Element.ALIGN_BOTTOM);
		payableAmountTable.addCell(payableAmountCell);
		
		payableAmountCell = new PdfPCell(new Paragraph(""));
		payableAmountCell.setBorder(Rectangle.NO_BORDER);
		payableAmountTable.addCell(payableAmountCell);
		
		payableAmountCell = new PdfPCell(new Paragraph(""));
		payableAmountCell.setBorder(Rectangle.RIGHT);
		payableAmountTable.addCell(payableAmountCell);
		
		Integer total = invoice.getRoundAmount();
		
		payableAmountCell = new PdfPCell(new Paragraph(convertNumberToWords(total)+Constants.RPS_ONLY, contentBold));
		payableAmountCell.setBorder(Rectangle.LEFT|Rectangle.BOTTOM);
		payableAmountCell.setHorizontalAlignment(Element.ALIGN_LEFT);
		payableAmountCell.setPaddingLeft(13f);
		//payableAmountCell.setVerticalAlignment(Element.ALIGN_BOTTOM);
		payableAmountCell.setFixedHeight(20);
		payableAmountTable.addCell(payableAmountCell);
		
		payableAmountCell = new PdfPCell(new Paragraph(Constants.AMNT_TTL, contentBold));
		payableAmountCell.setBorder(Rectangle.BOTTOM);
		payableAmountCell.setHorizontalAlignment(Element.ALIGN_CENTER);
		payableAmountCell.setVerticalAlignment(Element.ALIGN_TOP);
		payableAmountTable.addCell(payableAmountCell);
		
		payableAmountCell = new PdfPCell(new Paragraph(total.toString(), contentBold));
		payableAmountCell.setBorder(Rectangle.RIGHT|Rectangle.BOTTOM);
		payableAmountCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		payableAmountCell.setVerticalAlignment(Element.ALIGN_TOP);
		payableAmountCell.setPaddingRight(15f);
		payableAmountTable.addCell(payableAmountCell);
		
		PdfPCell payableAmountCell2 = new PdfPCell();
		payableAmountCell2.addElement(payableAmountTable);
		return payableAmountTable;
	}
	
	PdfPTable generateTaxTable(Invoice invoice) throws DocumentException {

		float amount;
		int type = 3;
		String taxType = null;
		int[] vAlignAmount = { Element.ALIGN_CENTER};
		int[] hAlignAmount = { Element.ALIGN_CENTER, Element.ALIGN_LEFT, Element.ALIGN_CENTER, Element.ALIGN_RIGHT };
		PdfPTable taxTable = new PdfPTable(4);
		float[] amountTableWidth = { 0.8f, 6f, 2.1f, 1.1f };
		taxTable.setWidthPercentage(102);
		taxTable.setWidths(amountTableWidth);
		
		/*String invoiceGuid = invoice.getGuid();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("invoiceGuid", invoiceGuid);
		List<InvoiceTax> incoiceTaxList = invoiceTaxDao.findByFields(InvoiceTax.class, params);*/
		List<InvoiceTax> incoiceTaxList = invoice.getTotalTax();

		for(InvoiceTax tax : incoiceTaxList){
			amount = tax.getAmount();
			taxType = tax.getTaxCode();
			if(amount != 0){
				String[][] taxData = {{"",taxType,"",Float.toString(amount)}}; 
				generateTableColumns(taxTable, taxData, 1, 4, contentRegular, vAlignAmount, hAlignAmount, type, 14);
				type = 2;
			}
		}
		String[][] roundOff = {{"",Constants.RND_OFF,"",invoice.getRoundAmount().toString()}};
		generateTableColumns(taxTable, roundOff, 1, 4, contentRegular, vAlignAmount, hAlignAmount, 4, 14);
		taxTable.getDefaultCell().setPaddingLeft(5);
		return taxTable;
	}
	
	void populateInvoiceAndRestInfo(Invoice invoice, PdfStamper stamper) throws IOException, DocumentException{
		
		//fill the information into template  
		AcroFields form = stamper.getAcroFields();
		
		String restAccountId = invoice.getAccountId();
		String restName = invoice.getRestaurantName();
		String restAddressLine1 = invoice.getOwnerAddressLine1();
		String restAddressLine2 = invoice.getOwnerAddressLine2();
		String restCity = invoice.getInvToCity();
		String restState = invoice.getInvToState();
		String restPin = new Integer(invoice.getZipCode()).toString();
		String restPhoneNo = invoice.getOwnerPhone();
		String restEmail = invoice.getOwnerEmail();
		
	//	String invoiceNo = invoice.getOrderId().toString();
		String date = dateToString(invoice.getDate());
		String dueDate = dateToString(invoice.getDueDate());
		String status = matchStatus(invoice.getStatus());
		String paymentDt = dateToString(invoice.getPaymentDate());
		String paymentMd = invoice.getPaymentMode();
		
		form.setField("ctAddress", Constants.CT_ADDRESS);
		form.setField("ctPin", Constants.CT_PIN);
		form.setField("ctPhone", Constants.CT_PHONE);
		form.setField("ctEmail", Constants.CT_EMAIL);
		form.setField("ctWebsite", Constants.CT_WEBSITE);
		form.setField("ctServiceTax", Constants.CT_SERVICE_TAX);
		form.setField("ctVat", Constants.CT_VAT);
		
		form.setField("invoiceNo", invoiceNo);
		form.setField("date", date);
		form.setField("dueDate", dueDate);
		form.setField("status", status);
		form.setField("paymentDate", paymentDt);
		form.setField("paymentMode", paymentMd);
		form.setField("accountId", restAccountId);
		form.setField("restName", restName);
		form.setField("restAddressOne", restAddressLine1);
		form.setField("restAddressTwo", restAddressLine2);
		form.setField("restCityState", restCity+", "+restState);
		form.setField("restPIN", restPin);
		form.setField("restEmail", restEmail);
		form.setField("restPhone", restPhoneNo);
		
		form.setGenerateAppearances(true);
		stamper.setFormFlattening(true);
	}
	
	public com.itextpdf.text.Font getSansSerifFont(int size, boolean isBold) {
		Font awtFont = null;
		if (isBold) {
			awtFont = new Font("Calibri", Font.BOLD, size);
		} else {
			awtFont = new Font("Calibri", Font.PLAIN, size);
		}
		
		BaseFont bf_Sans = new DefaultFontMapper().awtToPdf(awtFont);
		com.itextpdf.text.Font sans = new com.itextpdf.text.Font(bf_Sans, size);
		return sans;
	}
	
/*	public PdfPTable  generateExpenseTable(List<InvoiceTxn> invoiceTxnList) throws DocumentException{
		
		String txnDate, unitPrice, quantity, amount, type, description;
		Integer count = 1;
		int[] vAlignExpense = {Element.ALIGN_CENTER};
		int[] hAlignExpenseHeader = {Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER};
		int[] hAlignExpense = {Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_CENTER,Element.ALIGN_RIGHT};
		
		PdfPTable expeseTable = new PdfPTable(7);
		float[] expeseTableWidth = {0.8f,1f,1f,4f,1f,1.1f,1.1f};
		expeseTable.setWidths(expeseTableWidth);
		expeseTable.setWidthPercentage(102);
		
		String[][] str = {UtilityMethods.getEnumValues(Constants.INVOICE, Constants.INVOICE_HEADERS).stream().toArray(String[]::new)};
		generateTableColumns(expeseTable, str, 1, 7, contentBold, vAlignExpense, hAlignExpenseHeader, 1, 19);
		
		for (InvoiceTxn invoiceTxn : invoiceTxnList){
			txnDate = dateToString(invoiceTxn.getDeliveryDate());
			unitPrice = new Double(invoiceTxn.getUnitPrice()).toString();
			quantity = invoiceTxn.getQuantity().toString();
			amount = new Double(invoiceTxn.getSubTotal()).toString();
			type = invoiceTxn.getItem();
			description = invoiceTxn.getDescription();
			String[][] str1 = {{count.toString(),txnDate, type, description, unitPrice, quantity, amount}};
			generateTableColumns(expeseTable, str1, 1, 7, contentRegular,vAlignExpense, hAlignExpense, 2, 18);
			count++;
		}
		return expeseTable;
	}
	*/
	public void generateTableColumns(PdfPTable pdfPTable, Object[][] data, int row, int col, com.itextpdf.text.Font font, int[] verticalAlign, int[] horizontalAlign, int type, float height ){
		int i, j;
		PdfPCell pdfPCell = new PdfPCell();
		for (i = 0; i < row; i++) {
			for (j = 0; j < col; j++) {
				if(data[i][j].getClass().equals(String.class))
				{
					pdfPCell = new PdfPCell(new Paragraph((String)data[i][j], font));			//data element is a string 
				}
				else{
					pdfPCell = new PdfPCell();								//data element is a table 
					pdfPCell.addElement((PdfPTable)data[i][j]);
				}
					
				pdfPCell.setVerticalAlignment(verticalAlign[i]);
				pdfPCell.setHorizontalAlignment(horizontalAlign[j]);
				pdfPCell.setFixedHeight(height);
				
				if(horizontalAlign[j]==Element.ALIGN_RIGHT){
					pdfPCell.setPaddingRight(15f);
				}
				if(horizontalAlign[j]==Element.ALIGN_LEFT){
					pdfPCell.setPaddingLeft(6f);
				}
				if(type == 1){
					pdfPCell.setBorder(Rectangle.LEFT|Rectangle.RIGHT|Rectangle.TOP|Rectangle.BOTTOM);
					pdfPCell.setBackgroundColor(new BaseColor(217, 217, 217));
				}
				else if(type == 2){
					pdfPCell.setBorder(Rectangle.LEFT|Rectangle.RIGHT);
				}else if(type == 3){
					pdfPCell.setBorder(Rectangle.LEFT|Rectangle.RIGHT|Rectangle.TOP);
				}else {
					pdfPCell.setBorder(Rectangle.LEFT|Rectangle.RIGHT|Rectangle.BOTTOM);
				}
				
				pdfPTable.addCell(pdfPCell);
			}
		}
	}
	
	public String convertNumberToWords(Integer n) {
		String input;
		
		String[] maxs = { "", "", " Hundred", " Thousand", " Lakh",
				" Crore" };
		
		input = n.toString();
		String converted = "";
		int pos = 1;
		boolean hun = false;
		while (input.length() > 0) {
			if (pos == 1) // TENS AND UNIT POSITION
			{
				if (input.length() >= 2) // TWO DIGIT NUMBERS
				{
					String temp = input.substring(input.length() - 2,
							input.length());
					input = input.substring(0, input.length() - 2);
					converted += digits(temp);
				} else if (input.length() == 1) // 1 DIGIT NUMBER
				{
					converted += digits(input);
					input = "";
				}
				pos++;
			} else if (pos == 2) // HUNDRED POSITION
			{
				String temp = input.substring(input.length() - 1,
						input.length());
				input = input.substring(0, input.length() - 1);
				if (converted.length() > 0 && digits(temp) != "") {
					converted = (digits(temp) + maxs[pos] + " and") + converted;
					hun = true;
				} else {
					if (digits(temp) == "")
						;
					else
						converted = (digits(temp) + maxs[pos]) + converted;
					hun = true;
				}
				pos++;
			} else if (pos > 2) // REMAINING NUMBERS PAIRED BY TWO
			{
				if (input.length() >= 2) // EXTRACT 2 DIGITS
				{
					String temp = input.substring(input.length() - 2,
							input.length());
					input = input.substring(0, input.length() - 2);
					if (!hun && converted.length() > 0)
						converted = digits(temp) + maxs[pos] + " and"
								+ converted;
					else {
						if (digits(temp) == "")
							;
						else
							converted = digits(temp) + maxs[pos] + converted;
					}
				} else if (input.length() == 1) // EXTRACT 1 DIGIT
				{
					if (!hun && converted.length() > 0)
						converted = digits(input) + maxs[pos] + " and"
								+ converted;
					else {
						if (digits(input) == "")
							;
						else
							converted = digits(input) + maxs[pos] + converted;
						input = "";
					}
				}
				pos++;
			}
		}
		return converted;
	}

	private String digits(String temp)
	{
		String[] units = { "", " One", " Two", " Three", " Four",
				" Five", " Six", " Seven", " Eight", " Nine" };
		String[] teen = { " Ten", " Eleven", " Twelve", " Thirteen",
				" Fourteen", " Fifteen", " Sixteen", " Seventeen", " Eighteen",
				" Nineteen" };
		String[] tens = { " Twenty", " Thirty", " Forty", " Fifty",
				" Sixty", " Seventy", " Eighty", " Ninety" };
		
		String converted = "";
		for (int i = temp.length() - 1; i >= 0; i--) {
			int ch = temp.charAt(i) - 48;
			if (i == 0 && ch > 1 && temp.length() > 1)
				converted = tens[ch - 2] + converted; 
			else if (i == 0 && ch == 1 && temp.length() == 2) 
			{
				int sum = 0;
				for (int j = 0; j < 2; j++)
					sum = (sum * 10) + (temp.charAt(j) - 48);
				return teen[sum - 10];
			} else {
				if (ch > 0)
					converted = units[ch] + converted;
			} 
		}
		return converted;
	}

	private String numToString(int x) 
	{
		String num = "";
		while (x != 0) {
			num = ((char) ((x % 10) + 48)) + num;
			x /= 10;
		}
		return num;
	}
	
	public List<Invoice> getInvoiceData() {
		List<Invoice> invoiceList = new ArrayList<Invoice>();
		Map<String, Object> params = new HashMap<String, Object>();
		
		DateFormat forwardDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		String dateStr = forwardDateFormat.format(cal.getTime());
		Date date;
		try {
			date = forwardDateFormat.parse(dateStr);
			params.put("date", date);
			invoiceList = invoiceDao.findByFields(Invoice.class, params);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return invoiceList;
	}
	
/*	public List<InvoiceTxn> getInvoiceTxnData(String invoiceGuid){
		List<InvoiceTxn> invoiceTxnList = new ArrayList<InvoiceTxn>();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("invoiceGuid", invoiceGuid);
		invoiceTxnList = invoiceTxnDao.findByFields(InvoiceTxn.class, params);
		return invoiceTxnList; 
	}*/

	String dateToString(Date date){
		String reportDate = "";
		if(date!=null){
			DateFormat df = new SimpleDateFormat("MM-dd-yyyy");
			reportDate = df.format(date);
		}
		return reportDate;
	}
	
	String matchStatus(String statuDB){
		if(statuDB=="GENERATED")
			return "Active";
		else if(statuDB=="PIAD")
			return "In Active";
		return "Not Applicable";
					
	}
	
	public int triggerNewPage(PdfStamper stamper, Rectangle pagesize, ColumnText column, Rectangle rect, int pagecount) throws DocumentException {
	    stamper.insertPage(pagecount, pagesize);
	    PdfContentByte canvas = stamper.getOverContent(pagecount);
	    column.setCanvas(canvas);
	    column.setSimpleColumn(rect);
	    return column.go();
	}
}

